From 0e8c3dc578c5047c9264827e8bdbfbd244469d1a Mon Sep 17 00:00:00 2001
From: Shourya Singh Gupta <shouryasgupta@gmail.com>
Date: Tue, 21 Jul 2015 03:23:18 +0530
Subject: [PATCH] Testing Youtube integration.

---
 CMakeLists.txt                         |   2 +
 googleservices/CMakeLists.txt          |   7 ++
 googleservices/authorize.h             |   8 +-
 googleservices/gswindow.cpp            |   8 ++
 googleservices/job.cpp                 |  49 ++++++++++++
 googleservices/job.h                   |  74 +++++++++++++++++
 googleservices/youtubejob.cpp          | 140 +++++++++++++++++++++++++++++++++
 googleservices/youtubejob.h            |  59 ++++++++++++++
 googleservices/youtubejobcomposite.cpp | 117 +++++++++++++++++++++++++++
 googleservices/youtubejobcomposite.h   |  46 +++++++++++
 10 files changed, 508 insertions(+), 2 deletions(-)
 create mode 100644 googleservices/job.cpp
 create mode 100644 googleservices/job.h
 create mode 100644 googleservices/youtubejob.cpp
 create mode 100644 googleservices/youtubejob.h
 create mode 100644 googleservices/youtubejobcomposite.cpp
 create mode 100644 googleservices/youtubejobcomposite.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 68782ba..60c0dd6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -108,6 +108,8 @@ find_package(KF5 REQUIRED COMPONENTS
              OPTIONAL_COMPONENTS CalendarCore # for Calendar
 )
 
+find_package(KAccounts REQUIRED)
+
 # Dependencies detection required by all plugins
 
 DETECT_LIBKIPI(${KIPI_MIN_VERSION})
diff --git a/googleservices/CMakeLists.txt b/googleservices/CMakeLists.txt
index e29310e..62903c8 100644
--- a/googleservices/CMakeLists.txt
+++ b/googleservices/CMakeLists.txt
@@ -8,8 +8,14 @@ subdirs(icons)
 
 add_definitions(-DTRANSLATION_DOMAIN=\"kipiplugin_googleservices\")
 
+find_dependency(AccountsQt5 REQUIRED)
+include_directories(${ACCOUNTSQT_INCLUDE_DIRS})
+
 set(kipiplugin_googleservices_PART_SRCS
     authorize.cpp
+    job.cpp
+    youtubejob.cpp
+    youtubejobcomposite.cpp
     replacedialog.cpp
     mpform_gdrive.cpp
     mpform_picasa.cpp
@@ -31,6 +37,7 @@ target_link_libraries(kipiplugin_googleservices
                       KF5::WidgetsAddons
                       KF5::KIOCore
                       KF5::Wallet
+                      KAccounts
                       KF5kipiplugins
                      )
 
diff --git a/googleservices/authorize.h b/googleservices/authorize.h
index a1c0909..9a42c95 100644
--- a/googleservices/authorize.h
+++ b/googleservices/authorize.h
@@ -37,11 +37,15 @@
 
 namespace KIPIGoogleServicesPlugin
 {
-
+    
+class YoutubeJobComposite;
+    
 class Authorize : public QObject
 {
     Q_OBJECT
-
+    
+    friend class YoutubeJobComposite;
+    
 public:
 
     Authorize(QWidget* const parent, const QString & scope);
diff --git a/googleservices/gswindow.cpp b/googleservices/gswindow.cpp
index 7880cd5..5dd631e 100644
--- a/googleservices/gswindow.cpp
+++ b/googleservices/gswindow.cpp
@@ -75,6 +75,7 @@
 #include "picasawebtalker.h"
 #include "replacedialog.h"
 #include "kipiplugins_debug.h"
+#include "youtubejobcomposite.h"
 
 namespace KIPIGoogleServicesPlugin
 {
@@ -286,6 +287,13 @@ GSWindow::GSWindow(const QString& tmpFolder,QWidget* const /*parent*/, const QSt
             m_picsasa_talker->getAccessTokenFromRefreshToken(refresh_token);
         }
     }
+    
+    //NOTE: THIS IS JUST FOR PROOF OF CONCEPT THAT INTEGRATION OF YOUTUBE IS POSSIBLE.
+    bool test_youtube = true;
+    if(test_youtube)
+    {
+        YoutubeJobComposite* you = new YoutubeJobComposite();
+    }
 
 }
 
diff --git a/googleservices/job.cpp b/googleservices/job.cpp
new file mode 100644
index 0000000..41053af
--- /dev/null
+++ b/googleservices/job.cpp
@@ -0,0 +1,49 @@
+/*
+ Copyright 2014 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+
+ This library is free software; you can redistribute it and/or
+ modify it under the terms of the GNU Lesser General Public
+ License as published by the Free Software Foundation; either 
+ version 2.1 of the License, or (at your option) any later version.
+
+ This library is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ Lesser General Public License for more details.
+
+ You should have received a copy of the GNU Lesser General Public 
+ License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "job.h"
+#include <QJsonArray>
+#include <QDebug>
+
+using namespace KIPIGoogleServicesPlugin;
+
+struct KIPIGoogleServicesPlugin::JobPrivate
+{
+    QJsonObject m_data;
+};
+
+Job::Job(QObject* parent)
+    : KJob(parent)
+    , d_ptr(new JobPrivate)
+{
+}
+
+Job::~Job()
+{
+}
+
+QJsonObject Job::data() const
+{
+    Q_D(const Job);
+    return d->m_data;
+}
+
+void Job::setData(const QJsonObject &data)
+{
+    Q_D(Job);
+    d->m_data = data;
+}
diff --git a/googleservices/job.h b/googleservices/job.h
new file mode 100644
index 0000000..6644949
--- /dev/null
+++ b/googleservices/job.h
@@ -0,0 +1,74 @@
+/*
+ Copyright 2014 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+
+ This library is free software; you can redistribute it and/or
+ modify it under the terms of the GNU Lesser General Public
+ License as published by the Free Software Foundation; either 
+ version 2.1 of the License, or (at your option) any later version.
+
+ This library is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ Lesser General Public License for more details.
+
+ You should have received a copy of the GNU Lesser General Public 
+ License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef PURPOSEJOB_H
+#define PURPOSEJOB_H
+
+#include <KJob>
+#include <QJsonArray>
+#include <QJsonObject>
+#include <QMimeData>
+#include <QUrl>
+
+namespace KIPIGoogleServicesPlugin
+{
+
+struct JobPrivate;
+
+/**
+ * @brief Job that will actually perform the sharing
+ *
+ * When start is called, the sharing process will start and when the job
+ * emits finished, we'll know it's over.
+ *
+ * The start method called shouldn't be called before all data has been
+ * filled in. isReady can be used to check whether it's all ready to go,
+ * these arguments will have to be filled by the file provided by
+ * configSourceCode() and should end up defining all the arguments defined
+ * by neededArguments.
+ */
+class Job : public KJob
+{
+Q_OBJECT
+/**
+ * Represents the data the job will have available to perform its task
+ */
+Q_PROPERTY(QJsonObject data READ data CONSTANT)
+public:
+    Job(QObject* parent = 0);
+    virtual ~Job();
+
+    /**
+     * Should only be called after constructing
+     *
+     * @internal
+     */
+    void setData(const QJsonObject &data);
+    QJsonObject data() const;
+
+Q_SIGNALS:
+    void output(const QJsonObject& output);
+    void dataChanged();
+
+private:
+    Q_DECLARE_PRIVATE(Job);
+    QScopedPointer<JobPrivate> const d_ptr;
+};
+
+}
+
+#endif
diff --git a/googleservices/youtubejob.cpp b/googleservices/youtubejob.cpp
new file mode 100644
index 0000000..b039f49
--- /dev/null
+++ b/googleservices/youtubejob.cpp
@@ -0,0 +1,140 @@
+/*
+ Copyright 2014 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+
+ This library is free software; you can redistribute it and/or
+ modify it under the terms of the GNU Lesser General Public
+ License as published by the Free Software Foundation; either 
+ version 2.1 of the License, or (at your option) any later version.
+
+ This library is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ Lesser General Public License for more details.
+
+ You should have received a copy of the GNU Lesser General Public 
+ License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "youtubejob.h"
+#include <kpassworddialog.h>
+
+#include <QApplication>
+
+#include <QDebug>
+#include <QUrl>
+#include <QUrlQuery>
+#include <QIcon>
+#include <QDesktopServices>
+#include <KIO/Job>
+#include <KLocalizedString>
+#include <QJsonDocument>
+#include <QJsonObject>
+#include <QNetworkReply>
+#include <QHttpMultiPart>
+
+namespace KIPIGoogleServicesPlugin
+{
+
+const static QUrl apiUrl(QStringLiteral("https://www.googleapis.com/upload/youtube/v3/videos?part=snippet%2Cstatus&uploadType=resumable"));
+const static QString watchUrl = QStringLiteral("https://www.youtube.com/watch?v=");
+
+YoutubeJob::YoutubeJob(const QUrl& url, const QByteArray &accessToken, const QString& title, const QStringList& tags, const QString& description, QObject* parent)
+    : KJob(parent), m_url(url), m_token(accessToken)
+{
+    m_metadata = QByteArray("{ "
+        "\"snippet\": {"
+            "\"title\": \"" + title.toUtf8() + "\", "
+            "\"categoryId\": \"22\", "
+            "\"description\": \"" + description.toUtf8() + "\", "
+            "\"tags\": [ \"" + tags.join(QStringLiteral("\", \"")).toUtf8() + "\" ] "
+        "}, "
+        "\"status\": { "
+            "\"privacyStatus\": \"public\" "
+        "} "
+    "}");
+}
+
+void YoutubeJob::start()
+{
+    createLocation();
+}
+
+void YoutubeJob::fileFetched(KJob* j)
+{
+    if (j->error()) {
+        setError(j->error());
+        setErrorText(j->errorText());
+        emitResult();
+    }
+    KIO::StoredTransferJob* job = qobject_cast<KIO::StoredTransferJob*>(j);
+
+    uploadVideo(job->data());
+}
+
+void YoutubeJob::createLocation()
+{
+    QNetworkRequest req(apiUrl);
+    req.setHeader(QNetworkRequest::ContentTypeHeader, QStringLiteral("application/json; charset=UTF-8"));
+    req.setRawHeader("Authorization", "Bearer "+m_token);
+    req.setRawHeader("X-Upload-Content-Type", "video/*");
+
+    auto reply = m_manager.post(req, m_metadata);
+    connect(reply, &QNetworkReply::finished, this, &YoutubeJob::locationCreated);
+    connect(reply, static_cast<void(QNetworkReply::*)(QNetworkReply::NetworkError)>(&QNetworkReply::error),
+            [](QNetworkReply::NetworkError e){ qDebug() << "creation error" << e; });
+}
+
+void YoutubeJob::locationCreated()
+{
+    QNetworkReply* reply = qobject_cast<QNetworkReply*>(sender());
+    if (reply->error()) {
+        setError(reply->error());
+        setErrorText(reply->errorString());
+        qWarning() << "couldn't upload file" << reply->readAll();
+        emitResult();
+        return;
+    }
+    Q_ASSERT(reply->atEnd());
+    Q_ASSERT(reply->hasRawHeader("Location"));
+
+    m_uploadUrl = QUrl::fromEncoded(reply->rawHeader("Location"));
+
+    KIO::StoredTransferJob* job = KIO::storedGet(m_url);
+    connect(job, &KJob::finished, this, &YoutubeJob::fileFetched);
+}
+
+void YoutubeJob::uploadVideo(const QByteArray& data)
+{
+    QNetworkRequest req(m_uploadUrl);
+    req.setHeader(QNetworkRequest::ContentTypeHeader, QStringLiteral("video/*"));
+    req.setRawHeader("X-Upload-Content-Length", QByteArray::number(data.size()));
+    req.setRawHeader("Authorization", "Bearer "+m_token);
+
+    setTotalAmount(Bytes, data.size());
+    auto reply = m_manager.post(req, data);
+    connect(reply, &QNetworkReply::finished, this, &YoutubeJob::videoUploaded);
+    connect(reply, &QNetworkReply::uploadProgress, this, [this](quint64 bytesSent, quint64 bytesTotal) {
+        setProcessedAmount(Bytes, bytesSent);
+        setPercent(bytesTotal == 0 ? 0 : (bytesSent*100)/bytesTotal);
+    });
+    connect(reply, static_cast<void(QNetworkReply::*)(QNetworkReply::NetworkError)>(&QNetworkReply::error),
+            [](QNetworkReply::NetworkError e){ qDebug() << "upload error" << e; });
+}
+
+void YoutubeJob::videoUploaded()
+{
+    QNetworkReply* reply = qobject_cast<QNetworkReply*>(sender());
+    if (reply->error()) {
+        setError(reply->error());
+        setErrorText(reply->errorString());
+        qWarning() << "couldn't finish upload" << reply->readAll();
+        emitResult();
+        return;
+    }
+
+    auto doc = QJsonDocument::fromJson(reply->readAll()).object();
+    m_output = watchUrl+doc.value(QStringLiteral("id")).toString();
+    emitResult();
+}
+
+} // KIPIGoogleServicesPlugin
\ No newline at end of file
diff --git a/googleservices/youtubejob.h b/googleservices/youtubejob.h
new file mode 100644
index 0000000..1445c48
--- /dev/null
+++ b/googleservices/youtubejob.h
@@ -0,0 +1,59 @@
+/*
+ Copyright 2014 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+
+ This library is free software; you can redistribute it and/or
+ modify it under the terms of the GNU Lesser General Public
+ License as published by the Free Software Foundation; either 
+ version 2.1 of the License, or (at your option) any later version.
+
+ This library is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ Lesser General Public License for more details.
+
+ You should have received a copy of the GNU Lesser General Public 
+ License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef YOUTUBEJOB_H
+#define YOUTUBEJOB_H
+
+#include <KPasswordDialog>
+#include <KJob>
+#include <QMap>
+#include <QPointer>
+#include <QString>
+#include <QJsonValue>
+#include <QNetworkAccessManager>
+#include <QUrl>
+
+namespace KIPIGoogleServicesPlugin
+{
+
+class YoutubeJob : public KJob
+{
+    Q_OBJECT
+    public:
+        YoutubeJob(const QUrl& url, const QByteArray &token, const QString& title, const QStringList& tags, const QString& description, QObject* parent = Q_NULLPTR);
+        void start() override;
+
+        QString outputUrl() const { return m_output; }
+
+    private:
+        void fileFetched(KJob*);
+        void createLocation();
+        void locationCreated();
+        void uploadVideo(const QByteArray& data);
+        void videoUploaded();
+
+        QUrl m_url;
+        QByteArray m_token;
+        QString m_output;
+        QNetworkAccessManager m_manager;
+        QByteArray m_metadata;
+        QUrl m_uploadUrl;
+};
+
+} // namespace KIPIGoogleServicesPlugin
+
+#endif /* YOUTUBEJOB_H */
diff --git a/googleservices/youtubejobcomposite.cpp b/googleservices/youtubejobcomposite.cpp
new file mode 100644
index 0000000..2cf9b07
--- /dev/null
+++ b/googleservices/youtubejobcomposite.cpp
@@ -0,0 +1,117 @@
+/*
+ Copyright 2014 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+
+ This library is free software; you can redistribute it and/or
+ modify it under the terms of the GNU Lesser General Public
+ License as published by the Free Software Foundation; either 
+ version 2.1 of the License, or (at your option) any later version.
+
+ This library is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ Lesser General Public License for more details.
+
+ You should have received a copy of the GNU Lesser General Public 
+ License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "youtubejobcomposite.h"
+#include "youtubejob.h"
+#include <QDebug>
+#include <QJsonArray>
+#include <QJsonValue>
+#include <QJsonDocument>
+#include <QStandardPaths>
+#include <KLocalizedString>
+#include <KAccounts/getcredentialsjob.h>
+#include <KAccounts/core.h>
+#include <Accounts/Manager>
+#include <Accounts/Application>
+
+namespace KIPIGoogleServicesPlugin
+{
+
+QDebug operator<<(QDebug s, const Accounts::Service& service)
+{
+    s.nospace() << qPrintable(service.displayName()) << ',' << qPrintable(service.name()) << '\n';
+    return s;
+}
+QDebug operator<<(QDebug s, const Accounts::Provider& provider)
+{
+    s.nospace() << "Provider(" << qPrintable(provider.displayName()) << ',' << qPrintable(provider.name()) << ")\n";
+    return s;
+}
+
+YoutubeJobComposite::YoutubeJobComposite()
+    : Job()
+{
+    auth = new Authorize(0,QString("https://gdata.youtube.com"));
+    auth->doOAuth();
+    connect(auth,SIGNAL(signalRefreshTokenObtained(const QString)),
+            this,SLOT(slotAccessTokenReceived(const QString)));    
+}
+
+void YoutubeJobComposite::start()
+{
+    const QJsonValue jsonId = data().value(QStringLiteral("accountId"));
+    if (jsonId.isNull() || jsonId.isUndefined()) {
+        setError(1);
+        setErrorText(i18n("No YouTube account configured in your accounts."));
+        emitResult();
+        return;
+    }
+    const Accounts::AccountId id = jsonId.toInt();
+
+    //TODO: make async
+    QByteArray accessToken;
+    {
+        auto job = new GetCredentialsJob(id, this);
+        bool b = job->exec();
+        if (!b) {
+            qWarning() << "Couldn't fetch credentials";
+            setError(job->error());
+            setErrorText(job->errorText());
+            emitResult();
+            return;
+        }
+        accessToken = job->credentialsData()[QStringLiteral("AccessToken")].toByteArray();
+    }
+
+    m_pendingJobs = 0;
+    const QJsonArray urls = data().value(QStringLiteral("urls")).toArray();
+    foreach(const QJsonValue& url, urls) {
+        YoutubeJob* job = new YoutubeJob(QUrl(url.toString()),
+                                         accessToken,
+                                         data().value(QStringLiteral("videoTitle")).toString(),
+                                         data().value(QStringLiteral("videoTags")).toString().split(QLatin1Char(',')),
+                                         data().value(QStringLiteral("videoDesc")).toString(), this);
+        connect(job, &KJob::finished, this, &YoutubeJobComposite::subjobFinished);
+        job->start();
+        m_pendingJobs++;
+    }
+}
+
+void YoutubeJobComposite::subjobFinished(KJob* subjob)
+{
+    m_pendingJobs--;
+    if (subjob->error()) {
+        setError(subjob->error());
+        setErrorText(subjob->errorText());
+        emitResult();
+        return;
+    }
+    if (m_pendingJobs==0) {
+        if (!error()) {
+            const QJsonValue url = qobject_cast<YoutubeJob*>(subjob)->outputUrl();
+            Q_EMIT output({{ QStringLiteral("url"), url.toString() }});
+        }
+        emitResult();
+    }
+}
+
+void YoutubeJobComposite::slotAccessTokenReceived(const QString refresh_token)
+{
+    qDebug()<<"Access Token Obtained is : "<< auth->m_access_token << "Refresh Token Obtained is "<< refresh_token;
+}
+
+}
\ No newline at end of file
diff --git a/googleservices/youtubejobcomposite.h b/googleservices/youtubejobcomposite.h
new file mode 100644
index 0000000..0880a9c
--- /dev/null
+++ b/googleservices/youtubejobcomposite.h
@@ -0,0 +1,46 @@
+/*
+ Copyright 2014 Aleix Pol Gonzalez <aleixpol@blue-systems.com>
+
+ This library is free software; you can redistribute it and/or
+ modify it under the terms of the GNU Lesser General Public
+ License as published by the Free Software Foundation; either 
+ version 2.1 of the License, or (at your option) any later version.
+
+ This library is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ Lesser General Public License for more details.
+
+ You should have received a copy of the GNU Lesser General Public 
+ License along with this library.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef YOUTUBEJOBCOMPOSITE_H
+#define YOUTUBEJOBCOMPOSITE_H
+
+#include "job.h"
+#include "authorize.h"
+
+namespace KIPIGoogleServicesPlugin
+{
+
+class YoutubeJobComposite : public Job
+{
+    Q_OBJECT
+public:
+    YoutubeJobComposite();
+
+    virtual void start() override;
+
+private Q_SLOTS:
+    void subjobFinished(KJob* subjob);
+    void slotAccessTokenReceived(const QString);
+
+private:
+    int        m_pendingJobs;
+    Authorize* auth;
+};
+
+}
+
+#endif // YOUTUBEJOBCOMPOSITE_H
-- 
2.1.2

