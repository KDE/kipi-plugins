# ----------------------------------------------------------
# 
# General kipi-plugin tests
#
# ----------------------------------------------------------
AC_MSG_CHECKING([for libkipi in our sources])
if test -d $srcdir/libkipi; then
    LIBKIPI_CFLAGS='-I$(top_srcdir)/libkipi/libkipi'
    LIBKIPI_LIBS='$(top_builddir)/libkipi/libkipi/libkipi.la'
    LIBKIPI_LIBS_DEP='$(LIBKIPI_LIBS)'
    AC_MSG_RESULT([found])
else
    # FIXME: Write a real test
    LIBKIPI_CFLAGS=''
    LIBKIPI_LIBS='-lkipi'
    AC_MSG_RESULT([not found])
fi
AC_SUBST(LIBKIPI_CFLAGS)
AC_SUBST(LIBKIPI_LIBS)
AC_SUBST(LIBKIPI_LIBS_DEP)


AC_MSG_CHECKING([for libkexif in our sources])
if test -d $srcdir/libkexif; then
    LIBKEXIF_CFLAGS='-I$(top_srcdir)/libkexif'
    LIBKEXIF_LIBS='$(top_builddir)/libkexif/libkexif.la'
    LIBKEXIF_LIBS_DEP='$(LIBKEXIF_LIBS)'
    AC_MSG_RESULT([found])
else
    # FIXME: Write a real test
    LIBKEXIF_CFLAGS=''
    LIBKEXIF_LIBS='-lkexif'
    AC_MSG_RESULT([not found])
fi
AC_SUBST(LIBKEXIF_CFLAGS)
AC_SUBST(LIBKEXIF_LIBS)
AC_SUBST(LIBKEXIF_LIBS_DEP)


#---------------------------------------------------------
#
# gphoto2 detection
#
#---------------------------------------------------------
AC_PATH_PROG(GPHOTO_CONFIG,gphoto2-config)
AC_PATH_PROG(GPHOTO_PORT_CONFIG,gphoto2-port-config)
if test -n "${GPHOTO_CONFIG}"; then
  GPHOTO_CFLAGS="`$GPHOTO_CONFIG --cflags`"
  AC_SUBST(GPHOTO_CFLAGS)
  LIB_GPHOTO="`$GPHOTO_CONFIG --libs` `$GPHOTO_PORT_CONFIG --libs`"
  AC_SUBST(LIB_GPHOTO)
else
  AC_MSG_WARN([
gPhoto2 is required for the kameraklient plugin.
It's available from gPhoto's Sourceforge CVS.
Check http://www.gphoto.org/download.html for detail])
fi

AM_CONDITIONAL(compile_KAMERAKLIENT, test -n "${GPHOTO_CONFIG}")


# ----------------------------------------------------------
# 
# Slideshow plugin tests
#
# ----------------------------------------------------------


# ---------------------------------------------------------------------------------
# Check for OpenGL libs and Mesa
# The Slideshow plugin needs OpenGL to compile (either external or compiled in Qt)
# Added by Stefan Hellwig (stefan@stefanhellwig.de), based on mdl_have_opengl by
# Matthew D. Langston <langston@SLAC.Stanford.EDU> (ac-archive.sourceforge.net) 
# ---------------------------------------------------------------------------------

dnl @synopsis MDL_HAVE_OPENGL
dnl
dnl Search for OpenGL.  We search first for Mesa (a GPL'ed version of
dnl Mesa) before a vendor's version of OpenGL, unless we were
dnl specifically asked not to with `--with-mesa=no' or `--without-mesa'.
dnl
dnl SH: The OpenGL check is disabled by default and prints a warning that
dnl the slideshow plugin needs OpenGL support to compile. Enable the check
dnl with `--enable-opengl`.
dnl
dnl The four "standard" OpenGL libraries are searched for: "-lGL",
dnl "-lGLU", "-lGLX" (or "-lMesaGL", "-lMesaGLU" as the case may be) and
dnl "-lglut".
dnl
dnl All of the libraries that are found (since "-lglut" or "-lGLX" might
dnl be missing) are added to the shell output variable "GL_LIBS", along
dnl with any other libraries that are necessary to successfully link an
dnl OpenGL application (e.g. the X11 libraries).  Care has been taken to
dnl make sure that all of the libraries in "GL_LIBS" are listed in the
dnl proper order.
dnl
dnl Additionally, the shell output variable "GL_CFLAGS" is set to any
dnl flags (e.g. "-I" flags) that are necessary to successfully compile
dnl an OpenGL application.
dnl
dnl The following shell variable (which are not output variables) are
dnl also set to either "yes" or "no" (depending on which libraries were
dnl found) to help you determine exactly what was found.
dnl
dnl   have_GL
dnl   have_GLU
dnl   have_GLX
dnl   have_glut
dnl
dnl A complete little toy "Automake `make distcheck'" package of how to
dnl use this macro is available at:
dnl
dnl   ftp://ftp.slac.stanford.edu/users/langston/autoconf/ac_opengl-0.01.tar.gz
dnl
dnl Please note that as the ac_opengl macro and the toy example evolves,
dnl the version number increases, so you may have to adjust the above
dnl URL accordingly.
dnl
dnl minor bugfix by ahmet inan <auto@ainan.org>
dnl adaptations and minor improvements by Stefan Hellwig <stefan@stefanhellwig.de>
dnl
dnl @version $Id$
dnl @author Matthew D. Langston <langston@SLAC.Stanford.EDU>

AC_DEFUN([MDL_HAVE_OPENGL],
[
  AC_REQUIRE([AC_PROG_CC])
  AC_REQUIRE([AC_PATH_X])
  AC_REQUIRE([AC_PATH_XTRA])

  AC_ARG_ENABLE([opengl],
	AC_HELP_STRING([--enable-opengl],
		       [use external OpenGL libraries instead of Qt (default is DISABLED)]),
dnl
dnl Action if OpenGL is given: CHECK FOR OPENGL LIBRARIES
dnl
[
			
  AC_CACHE_CHECK([for OpenGL], mdl_cv_have_OpenGL,
  [
dnl Check for Mesa first, unless we were asked not to.
    AC_ARG_WITH([mesa],
                AC_HELP_STRING([--with-mesa],
                            [prefer Mesa OpenGL libraries (default is NO)]),
                [ac_cv_use_mesa=$withval],[ac_cv_use_mesa=no])

    if test x"$ac_cv_use_mesa" = xyes; then
       GL_search_list="MesaGL   GL"
      GLU_search_list="MesaGLU GLU"
      GLX_search_list="MesaGLX GLX"
    else
       GL_search_list="GL  MesaGL"
      GLU_search_list="GLU MesaGLU"
      GLX_search_list="GLX MesaGLX"
    fi

    AC_LANG_SAVE
    AC_LANG_C

dnl If we are running under X11 then add in the appropriate libraries.
if test x"$no_x" != xyes; then
dnl Add everything we need to compile and link X programs to GL_X_CFLAGS
dnl and GL_X_LIBS.
  GL_CFLAGS="$X_CFLAGS"
  GL_X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 -lXext -lXmu -lXt -lXi $X_EXTRA_LIBS"
fi
    GL_save_CPPFLAGS="$CPPFLAGS"
    CPPFLAGS="$GL_CFLAGS"

    GL_save_LIBS="$LIBS"
    LIBS="$GL_X_LIBS"


    # Save the "AC_MSG_RESULT file descriptor" to FD 8.
    exec 8>&AC_FD_MSG

    # Temporarily turn off AC_MSG_RESULT so that the user gets pretty
    # messages.
    exec AC_FD_MSG>/dev/null

    AC_SEARCH_LIBS(glAccum,         $GL_search_list,  have_GL=yes,   have_GL=no)
    AC_SEARCH_LIBS(gluBeginCurve,   $GLU_search_list, have_GLU=yes,  have_GLU=no)
    AC_SEARCH_LIBS(glXChooseVisual, $GLX_search_list, have_GLX=yes,  have_GLX=no)
    AC_SEARCH_LIBS(glutInit,        glut,             have_glut=yes, have_glut=no)



    # Restore pretty messages.
    exec AC_FD_MSG>&8

    if test -n "$LIBS"; then
      mdl_cv_have_OpenGL=yes
      GL_LIBS="$LIBS"
      AC_SUBST(GL_CFLAGS)
      AC_SUBST(GL_LIBS)
    else
      mdl_cv_have_OpenGL=no
      GL_CFLAGS=
    fi

dnl Reset GL_X_LIBS regardless, since it was just a temporary variable
dnl and we don't want to be global namespace polluters.
    GL_X_LIBS=

    LIBS="$GL_save_LIBS"
    CPPFLAGS="$GL_save_CPPFLAGS"

    AC_LANG_RESTORE
    
    mdl_cv_GL_CFLAGS="$GL_CFLAGS"
    mdl_cv_GL_LIBS="$GL_LIBS"
    mdl_cv_have_GL="$have_GL"
    mdl_cv_have_GLU="$have_GLU"
    mdl_cv_have_GLX="$have_GLX"
    mdl_cv_have_glut="$have_glut"
  ])
  GL_CFLAGS="$mdl_cv_GL_CFLAGS"
  GL_LIBS="$mdl_cv_GL_LIBS"
  have_GL="$mdl_cv_have_GL"
  have_GLU="$mdl_cv_have_GLU"
  have_GLX="$mdl_cv_have_GLX"
  have_glut="$mdl_cv_have_glut"

],
dnl
dnl End of OpenGL check (action if given)
dnl Print a warning/notice message because
dnl the slideshow plug-in needs OpenGL!
dnl
[

dnl
dnl configure didn't specify to use external opengl library
dnl check if qt has been compiled with opengl
dnl

    AC_CHECK_LIB( $qtlib-mt, glAccum,  have_GL=yes,   have_GL=no)
    if test $have_GL = "yes"; then
	AC_MSG_RESULT(
	[qt compiled with opengl support. using built in opengl])
    else
	AC_MSG_WARN(
	[qt not compiled with opengl support. disabling slideshow plugin])
    fi	 
])

])

#---------------------------------------------------------
# imlib2-detection
#---------------------------------------------------------
# checking for Imlib2...

AC_DEFUN([KDE_FIND_IMLIB2_CONFIG],
   [AC_MSG_CHECKING([for imlib2-config])

imlib2_config_given=NO
ac_imlib2_config=""

AC_ARG_WITH(imlib2-config,
        [  --with-imlib2-config     directory where \"imlib2-config\" lies ],
        [  ac_imlib2_config="$withval/imlib2-config"
           imlib2_config_given=yes
        ])

if test "$imlib2_config_given" = "yes"; then
  if test ! -r $ac_imlib2_config; then
    AC_MSG_RESULT(wrong file specified)
    ac_imlib2_config=""
  else
    IMLIB2_CFLAGS=`$ac_imlib2_config --cflags`
    LIB_IMLIB2=`$ac_imlib2_config --libs`
    AC_SUBST(LIB_IMLIB2)
    AC_SUBST(IMLIB2_CFLAGS)
    AC_MSG_RESULT($ac_imlib2_config)
  fi
else
  ac_imlib2_config=`which imlib2-config 2>/dev/null`
  if test -z "$ac_imlib2_config"; then
    AC_MSG_RESULT(no)
  else
    dummy=`echo "$ac_imlib2_config" | grep '/imlib2-config'`
    if test -z "$dummy"; then
      AC_MSG_RESULT(no)
      ac_imlib2_config=""
    else
      LIB_IMLIB2=`$ac_imlib2_config --libs`
      IMLIB2_CFLAGS=`$ac_imlib2_config --cflags`
      imlib2_config=`echo "$LIB_IMLIB2" | grep lImlib2`
      if test -z "$imlib2_config"; then
        AC_MSG_RESULT(no)
        ac_imlib2_config=""
      else
        AC_SUBST(LIB_IMLIB2)
        AC_SUBST(IMLIB2_CFLAGS)
        AC_MSG_RESULT($ac_imlib2_config)
      fi
    fi
  fi
fi

])

dnl Check if Imlib2 is installed properly
KDE_FIND_IMLIB2_CONFIG

dnl Check for Mesa (OpenGL) for slideshow plugin
MDL_HAVE_OPENGL

AM_CONDITIONAL(compile_SLIDESHOW, test -n "$ac_imlib2_config" -a "$have_GL" = yes )

if test -z "$ac_imlib2_config" -o "$have_GL" != yes; then
	AC_MSG_WARN([Slideshow plugin will not be compiled])
fi

