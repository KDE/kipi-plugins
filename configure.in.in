###############################################################################
# BEGIN PKG-CONFIG CHECK
###############################################################################

dnl KDE_PKG_CHECK_MODULES(GSTUFF, gtk+-2.0 >= 1.3 glib = 1.3.4, action-if, action-not)
dnl defines GSTUFF_LIBS, GSTUFF_CFLAGS, see pkg-config man page
dnl also defines GSTUFF_PKG_ERRORS on error
AC_DEFUN([KDE_PKG_CHECK_MODULES], [
  succeeded=no

  if test -z "$PKG_CONFIG"; then
    AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
  fi

  if test "$PKG_CONFIG" != "no" ; then
     PKG_CONFIG_MIN_VERSION=0.9.0
     if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
        AC_MSG_CHECKING(for $2)

        if $PKG_CONFIG --exists "$2" ; then
            AC_MSG_RESULT(yes)
            succeeded=yes

            AC_MSG_CHECKING($1_CFLAGS)
            $1_CFLAGS=`$PKG_CONFIG --cflags "$2"`
            AC_MSG_RESULT($$1_CFLAGS)

            AC_MSG_CHECKING($1_LIBS)
            $1_LIBS=`$PKG_CONFIG --libs "$2"`
            AC_MSG_RESULT($$1_LIBS)
        else
            $1_CFLAGS=""
            $1_LIBS=""
            ## If we have a custom action on failure, don't print errors, but
            ## do set a variable so people can do so.
            $1_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "$2"`
            ifelse([$4], ,echo $$1_PKG_ERRORS,)
        fi

        AC_SUBST($1_CFLAGS)
        AC_SUBST($1_LIBS)
     else
        echo "*** Your version of pkg-config is too old. You need version $PKG_CONFIG_MIN_VERSION or newer."
        echo "*** See http://www.freedesktop.org/software/pkgconfig"
     fi
  fi
  if test $succeeded = yes; then
     ifelse([$3], , :, [$3])
  else
     ifelse([$4], , AC_MSG_WARN([Library requirements ($2) not met; consider adjusting the PKG_CONFIG_PATH environment variable if your libraries are in a nonstandard prefix so pkg-config can find them.]), [$4])
  fi
])

AC_ARG_VAR(PKGCONFIGFOUND, [Path to pkg-config])
AC_CHECK_PROG(PKGCONFIGFOUND, pkg-config,[yes])

###############################################################################
# END PKG-CONFIG CHECK
###############################################################################


# ----------------------------------------------------------
# 
# General kipi-plugin tests
#
# ----------------------------------------------------------

if test -d $srcdir/libkipi; then
    AC_MSG_CHECKING([for libkipi in our sources])
    LIBKIPI_CFLAGS='-I$(top_srcdir)/libkipi/libkipi'
    LIBKIPI_LIBS='$(top_builddir)/libkipi/libkipi/libkipi.la'
    LIBKIPI_LIBS_DEP='$(LIBKIPI_LIBS)'
    AC_MSG_RESULT([found])
    AC_SUBST(LIBKIPI_CFLAGS)
    AC_SUBST(LIBKIPI_LIBS)
    AC_SUBST(LIBKIPI_LIBS_DEP)
else

    if test "$PKGCONFIGFOUND" = "yes" ; then
        # check for libkipi
        have_libkipi=no

	KDE_PKG_CHECK_MODULES(LIBKIPI, libkipi >= 0.1,
		have_libkipi=yes, have_libkipi=no)

	if test "x$have_libkipi" = "xno"; then
	   LIBKIPI_CFLAGS=""
	   LIBKIPI_LIBS=""
           AC_MSG_RESULT([not found])
	else
	   AC_MSG_RESULT([found])
	fi
     else
        LIBKIPI_CFLAGS=""
	LIBKIPI_LIBS=""
        AC_MSG_RESULT([not found])
     fi 
     AC_SUBST(LIBKIPI_CFLAGS)
     AC_SUBST(LIBKIPI_LIBS)
fi

if test "x$have_libkipi" != "xyes"; then
     DO_NOT_COMPILE="$DO_NOT_COMPILE kipi-plugins"
fi

# --------------------------------------------------------------------
# Check for libkexif
# --------------------------------------------------------------------

AC_MSG_CHECKING([for libkexif in our sources])
if test -d $srcdir/libkexif; then
    have_libkexif=yes
    LIBKEXIF_CFLAGS='-I$(top_srcdir)/libkexif'
    LIBKEXIF_LIBS='$(top_builddir)/libkexif/libkexif.la'
    LIBKEXIF_LIBS_DEP='$(LIBKEXIF_LIBS)'
    AC_MSG_RESULT([found])
    AC_SUBST(LIBKEXIF_CFLAGS)
    AC_SUBST(LIBKEXIF_LIBS)
    AC_SUBST(LIBKEXIF_LIBS_DEP)
else
    
    if test "$PKGCONFIGFOUND" = "yes" ; then
        # check for libkexif
        have_libkexif=no

	KDE_PKG_CHECK_MODULES(LIBKEXIF, libkexif >= 0.1,
		have_libkexif=yes, have_libkexif=no)

	if test "x$have_libkexif" = "xno"; then
	   LIBKEXIF_CFLAGS=""
	   LIBKEXIF_LIBS=""
           AC_MSG_RESULT([not found])
	else
	   AC_MSG_RESULT([found])
	fi
     else
        LIBKEXIF_CFLAGS=""
	LIBKEXIF_LIBS=""
        AC_MSG_RESULT([not found])
     fi 
     AC_SUBST(LIBKEXIF_CFLAGS)
     AC_SUBST(LIBKEXIF_LIBS)
fi

if test x$have_libkexif != xyes; then
   AC_MSG_RESULT(
	[libkexif not installed. disabling jpeglossless plugin])
fi

AM_CONDITIONAL(compile_JPEGLOSSLESS, [test x$have_libkexif = xyes])


#---------------------------------------------------------
#
# gphoto2 detection
#
#---------------------------------------------------------
AC_PATH_PROG(GPHOTO_CONFIG,gphoto2-config)
AC_PATH_PROG(GPHOTO_PORT_CONFIG,gphoto2-port-config)
if test -n "${GPHOTO_CONFIG}"; then
  GPHOTO_CFLAGS="`$GPHOTO_CONFIG --cflags`"
  AC_SUBST(GPHOTO_CFLAGS)
  LIB_GPHOTO="`$GPHOTO_CONFIG --libs` `$GPHOTO_PORT_CONFIG --libs`"
  AC_SUBST(LIB_GPHOTO)
else
  AC_MSG_WARN([
gPhoto2 is required for the kameraklient plugin.
It's available from gPhoto's Sourceforge CVS.
Check http://www.gphoto.org/download.html for detail])
fi

AM_CONDITIONAL(compile_KAMERAKLIENT, test -n "${GPHOTO_CONFIG}")


# ----------------------------------------------------------
# 
# Slideshow plugin tests
#
# ----------------------------------------------------------

###############################################################################
# BEGIN QT OPENGL CHECK (fudged from amaroK)
###############################################################################

AC_ARG_WITH(opengl,
    AC_HELP_STRING([--without-opengl],[build kipi-plugins without OpenGL [default=with]]),
    [build_opengl=$withval],
    [build_opengl=yes]
)

if test "$build_opengl" != "no"; then
    AC_MSG_CHECKING(for Qt with OpenGL support)
    AC_CACHE_VAL(ac_cv_kde_qt_has_opengl,
    [
    AC_LANG_SAVE
    AC_LANG_CPLUSPLUS

    save_CXXFLAGS="$CXXFLAGS"
    save_LIBS="$LIBS"
    save_LDFLAGS="$LDFLAGS"

    CXXFLAGS="$CXXFLAGS -I$qt_incdir $all_includes"
    LDFLAGS="$LDFLAGS -L$qt_libdir $all_libraries $USER_LDFLAGS $KDE_MT_LDFLAGS"
    LIBS="$LIBS $LIBQT $KDE_MT_LIBS"

    AC_TRY_LINK([
    #include <qgl.h>
    ],
    [
    (void)new QGLWidget((QWidget*)0, "qgl");
    ],
    ac_cv_kde_qt_has_opengl=yes,
    ac_cv_kde_qt_has_opengl=no)

    CXXFLAGS="$save_CXXFLAGS"
    LIBS="$save_LIBS"
    LDFLAGS="$save_LDFLAGS"
    AC_LANG_RESTORE
    ])
    AC_MSG_RESULT($ac_cv_kde_qt_has_opengl)

    if test x$ac_cv_kde_qt_has_opengl = xyes; then
       have_GL="yes"
       GL_LIBS="-lGL"
    else
       have_GL="no"
       GL_LIBS=""	
    fi

    AC_SUBST(GL_LIBS)
fi

###############################################################################
# END QT OPENGL CHECK
###############################################################################



#---------------------------------------------------------
# imlib2-detection
#---------------------------------------------------------
# checking for Imlib2...

AC_DEFUN([KDE_FIND_IMLIB2_CONFIG],
   [AC_MSG_CHECKING([for imlib2-config])

imlib2_config_given=NO
ac_imlib2_config=""

AC_ARG_WITH(imlib2-config,
        [  --with-imlib2-config     directory where \"imlib2-config\" lies ],
        [  ac_imlib2_config="$withval/imlib2-config"
           imlib2_config_given=yes
        ])

if test "$imlib2_config_given" = "yes"; then
  if test ! -r $ac_imlib2_config; then
    AC_MSG_RESULT(wrong file specified)
    ac_imlib2_config=""
  else
    IMLIB2_CFLAGS=`$ac_imlib2_config --cflags`
    LIB_IMLIB2=`$ac_imlib2_config --libs`
    AC_SUBST(LIB_IMLIB2)
    AC_SUBST(IMLIB2_CFLAGS)
    AC_MSG_RESULT($ac_imlib2_config)
  fi
else
  ac_imlib2_config=`which imlib2-config 2>/dev/null`
  if test -z "$ac_imlib2_config"; then
    AC_MSG_RESULT(no)
  else
    dummy=`echo "$ac_imlib2_config" | grep '/imlib2-config'`
    if test -z "$dummy"; then
      AC_MSG_RESULT(no)
      ac_imlib2_config=""
    else
      LIB_IMLIB2=`$ac_imlib2_config --libs`
      IMLIB2_CFLAGS=`$ac_imlib2_config --cflags`
      imlib2_config=`echo "$LIB_IMLIB2" | grep lImlib2`
      if test -z "$imlib2_config"; then
        AC_MSG_RESULT(no)
        ac_imlib2_config=""
      else
        AC_SUBST(LIB_IMLIB2)
        AC_SUBST(IMLIB2_CFLAGS)
        AC_MSG_RESULT($ac_imlib2_config)
      fi
    fi
  fi
fi

])

dnl Check if Imlib2 is installed properly
KDE_FIND_IMLIB2_CONFIG

AM_CONDITIONAL(compile_SLIDESHOW, test -n "$ac_imlib2_config" -a "$have_GL" = yes )

if test -z "$ac_imlib2_config" -o "$have_GL" != yes; then
	AC_MSG_WARN([Slideshow plugin will not be compiled])
fi



## # ---------------------------------------------------------------------------------
## # Check for OpenGL libs and Mesa
## # The Slideshow plugin needs OpenGL to compile (either external or compiled in Qt)
## # Added by Stefan Hellwig (stefan@stefanhellwig.de), based on mdl_have_opengl by
## # Matthew D. Langston <langston@SLAC.Stanford.EDU> (ac-archive.sourceforge.net) 
## # ---------------------------------------------------------------------------------
## 
## dnl @synopsis MDL_HAVE_OPENGL
## dnl
## dnl Search for OpenGL.  We search first for Mesa (a GPL'ed version of
## dnl Mesa) before a vendor's version of OpenGL, unless we were
## dnl specifically asked not to with `--with-mesa=no' or `--without-mesa'.
## dnl
## dnl SH: The OpenGL check is disabled by default and prints a warning that
## dnl the slideshow plugin needs OpenGL support to compile. Enable the check
## dnl with `--enable-opengl`.
## dnl
## dnl The four "standard" OpenGL libraries are searched for: "-lGL",
## dnl "-lGLU", "-lGLX" (or "-lMesaGL", "-lMesaGLU" as the case may be) and
## dnl "-lglut".
## dnl
## dnl All of the libraries that are found (since "-lglut" or "-lGLX" might
## dnl be missing) are added to the shell output variable "GL_LIBS", along
## dnl with any other libraries that are necessary to successfully link an
## dnl OpenGL application (e.g. the X11 libraries).  Care has been taken to
## dnl make sure that all of the libraries in "GL_LIBS" are listed in the
## dnl proper order.
## dnl
## dnl Additionally, the shell output variable "GL_CFLAGS" is set to any
## dnl flags (e.g. "-I" flags) that are necessary to successfully compile
## dnl an OpenGL application.
## dnl
## dnl The following shell variable (which are not output variables) are
## dnl also set to either "yes" or "no" (depending on which libraries were
## dnl found) to help you determine exactly what was found.
## dnl
## dnl   have_GL
## dnl   have_GLU
## dnl   have_GLX
## dnl   have_glut
## dnl
## dnl A complete little toy "Automake `make distcheck'" package of how to
## dnl use this macro is available at:
## dnl
## dnl   ftp://ftp.slac.stanford.edu/users/langston/autoconf/ac_opengl-0.01.tar.gz
## dnl
## dnl Please note that as the ac_opengl macro and the toy example evolves,
## dnl the version number increases, so you may have to adjust the above
## dnl URL accordingly.
## dnl
## dnl minor bugfix by ahmet inan <auto@ainan.org>
## dnl adaptations and minor improvements by Stefan Hellwig <stefan@stefanhellwig.de>
## dnl
## dnl @version $Id$
## dnl @author Matthew D. Langston <langston@SLAC.Stanford.EDU>
## 
## AC_DEFUN([MDL_HAVE_OPENGL],
## [
##   AC_REQUIRE([AC_PROG_CC])
##   AC_REQUIRE([AC_PATH_X])
##   AC_REQUIRE([AC_PATH_XTRA])
## 
##   AC_ARG_ENABLE([opengl],
## 	AC_HELP_STRING([--enable-opengl],
## 		       [use external OpenGL libraries instead of Qt (default is DISABLED)]),
## dnl
## dnl Action if OpenGL is given: CHECK FOR OPENGL LIBRARIES
## dnl
## [
## 			
##   AC_CACHE_CHECK([for OpenGL], mdl_cv_have_OpenGL,
##   [
## dnl Check for Mesa first, unless we were asked not to.
##     AC_ARG_WITH([mesa],
##                 AC_HELP_STRING([--with-mesa],
##                             [prefer Mesa OpenGL libraries (default is NO)]),
##                 [ac_cv_use_mesa=$withval],[ac_cv_use_mesa=no])
## 
##     if test x"$ac_cv_use_mesa" = xyes; then
##        GL_search_list="MesaGL   GL"
##       GLU_search_list="MesaGLU GLU"
##       GLX_search_list="MesaGLX GLX"
##     else
##        GL_search_list="GL  MesaGL"
##       GLU_search_list="GLU MesaGLU"
##       GLX_search_list="GLX MesaGLX"
##     fi
## 
##     AC_LANG_SAVE
##     AC_LANG_C
## 
## dnl If we are running under X11 then add in the appropriate libraries.
## if test x"$no_x" != xyes; then
## dnl Add everything we need to compile and link X programs to GL_X_CFLAGS
## dnl and GL_X_LIBS.
##   GL_CFLAGS="$X_CFLAGS"
##   GL_X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 -lXext -lXmu -lXt -lXi $X_EXTRA_LIBS"
## fi
##     GL_save_CPPFLAGS="$CPPFLAGS"
##     CPPFLAGS="$GL_CFLAGS"
## 
##     GL_save_LIBS="$LIBS"
##     LIBS="$GL_X_LIBS"
## 
## 
##     # Save the "AC_MSG_RESULT file descriptor" to FD 8.
##     exec 8>&AC_FD_MSG
## 
##     # Temporarily turn off AC_MSG_RESULT so that the user gets pretty
##     # messages.
##     exec AC_FD_MSG>/dev/null
## 
##     AC_SEARCH_LIBS(glAccum,         $GL_search_list,  have_GL=yes,   have_GL=no)
##     AC_SEARCH_LIBS(gluBeginCurve,   $GLU_search_list, have_GLU=yes,  have_GLU=no)
##     AC_SEARCH_LIBS(glXChooseVisual, $GLX_search_list, have_GLX=yes,  have_GLX=no)
##     AC_SEARCH_LIBS(glutInit,        glut,             have_glut=yes, have_glut=no)
## 
## 
## 
##     # Restore pretty messages.
##     exec AC_FD_MSG>&8
## 
##     if test -n "$LIBS"; then
##       mdl_cv_have_OpenGL=yes
##       GL_LIBS="$LIBS"
##       AC_SUBST(GL_CFLAGS)
##       AC_SUBST(GL_LIBS)
##     else
##       mdl_cv_have_OpenGL=no
##       GL_CFLAGS=
##     fi
## 
## dnl Reset GL_X_LIBS regardless, since it was just a temporary variable
## dnl and we don't want to be global namespace polluters.
##     GL_X_LIBS=
## 
##     LIBS="$GL_save_LIBS"
##     CPPFLAGS="$GL_save_CPPFLAGS"
## 
##     AC_LANG_RESTORE
##     
##     mdl_cv_GL_CFLAGS="$GL_CFLAGS"
##     mdl_cv_GL_LIBS="$GL_LIBS"
##     mdl_cv_have_GL="$have_GL"
##     mdl_cv_have_GLU="$have_GLU"
##     mdl_cv_have_GLX="$have_GLX"
##     mdl_cv_have_glut="$have_glut"
##   ])
##   GL_CFLAGS="$mdl_cv_GL_CFLAGS"
##   GL_LIBS="$mdl_cv_GL_LIBS"
##   have_GL="$mdl_cv_have_GL"
##   have_GLU="$mdl_cv_have_GLU"
##   have_GLX="$mdl_cv_have_GLX"
##   have_glut="$mdl_cv_have_glut"
## 
## ],
## dnl
## dnl End of OpenGL check (action if given)
## dnl Print a warning/notice message because
## dnl the slideshow plug-in needs OpenGL!
## dnl
## [
## 
## dnl
## dnl configure didn't specify to use external opengl library
## dnl check if qt has been compiled with opengl
## dnl
## 
##     AC_CHECK_LIB( $qtlib-mt, glAccum,  have_GL=yes,   have_GL=no)
##     if test $have_GL = "yes"; then
## 	AC_MSG_RESULT(
## 	[qt compiled with opengl support. using built in opengl])
##     else
## 	AC_MSG_WARN(
## 	[qt not compiled with opengl support. disabling slideshow plugin])
##     fi	 
## ])
## 
## ])
## dnl Check for Mesa (OpenGL) for slideshow plugin
## MDL_HAVE_OPENGL

