# ----------------------------------------------------------
#
# pkg-config check
#
# ----------------------------------------------------------

AC_ARG_VAR(PKGCONFIGFOUND, [Path to pkg-config])
AC_CHECK_PROG(PKGCONFIGFOUND, pkg-config,[yes])

# ----------------------------------------------------------
#
# common header files path for kipi-plugins
#
# ----------------------------------------------------------

KIPI_PLUGINS_COMMON_INCLUDE="-I\$(top_srcdir)/kipi-plugins/common/include"
AC_SUBST(KIPI_PLUGINS_COMMON_INCLUDE)

KIPI_PLUGINS_COMMON_LDFLAGS="-L\$(top_builddir)/kipi-plugins/common/libkipiplugins"
AC_SUBST(KIPI_PLUGINS_COMMON_LDFLAGS)

# -----------------------------------------------------------------
#
# enable hidden visibility only if kde >= 3.3.2 and kdelibs has
# been compiled with visibility enabled
#
# -----------------------------------------------------------------

AC_LANG_PUSH(C++)
kipiplugins_save_cppflags=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $all_includes"  
AC_MSG_CHECKING([if hidden visibility should be enabled])
AC_COMPILE_IFELSE(
 [
   #include <kdeversion.h>
   #include <kdemacros.h>
   int other_func( void )
   { 
      #if KDE_IS_VERSION(3,3,2)
      #else
        iam dying;
      #endif
      #ifdef __KDE_HAVE_GCC_VISIBILITY
      #else
        no, iam really dead;
      #endif      
      return 0;
   }
 ], 
 [ AC_MSG_RESULT([yes])
   kipiplugins_enable_hidden_visibility="yes" ],
 [ AC_MSG_RESULT([no]) ] 
)
CPPFLAGS=$kipiplugins_save_cppflags
AC_LANG_POP(C++)

if test "x$kipiplugins_enable_hidden_visibility" = "xyes"; then
   KDE_ENABLE_HIDDEN_VISIBILITY 
fi

# ----------------------------------------------------------
#
# General kipi-plugin tests
#
# ----------------------------------------------------------

if test -d $srcdir/libkipi; then
    have_libkipi=yes
    AC_MSG_CHECKING([for libkipi in our sources])
    LIBKIPI_CFLAGS='-I$(top_builddir)/libkipi -I$(top_srcdir)/libkipi'
    LIBKIPI_LIBS='$(top_builddir)/libkipi/libkipi/libkipi.la'
    LIBKIPI_LIBS_DEP='$(LIBKIPI_LIBS)'
    AC_MSG_RESULT([found])
    AC_SUBST(LIBKIPI_CFLAGS)
    AC_SUBST(LIBKIPI_LIBS)
    AC_SUBST(LIBKIPI_LIBS_DEP)
else

    if test "$PKGCONFIGFOUND" = "yes" ; then
        # check for libkipi
        have_libkipi=no

	KDE_PKG_CHECK_MODULES(LIBKIPI, libkipi >= 0.1.5,
		have_libkipi=yes, have_libkipi=no)

	if test "x$have_libkipi" = "xno"; then
	   LIBKIPI_CFLAGS=""
	   LIBKIPI_LIBS=""
           AC_MSG_RESULT([not found])
	else
	   AC_MSG_RESULT([found])
	fi
     else
        LIBKIPI_CFLAGS=""
	LIBKIPI_LIBS=""
        AC_MSG_RESULT([not found])
     fi
     AC_SUBST(LIBKIPI_CFLAGS)
     AC_SUBST(LIBKIPI_LIBS)
fi

if test "x$have_libkipi" != "xyes"; then
     DO_NOT_COMPILE="$DO_NOT_COMPILE kipi-plugins"
fi

# --------------------------------------------------------------------
#
# Check for libkexiv2
#
# --------------------------------------------------------------------

AC_MSG_CHECKING([for libkexiv2 in our sources])
if test -d $srcdir/libkexiv2; then
    have_libkexiv2=yes
    LIBKEXIV2_CFLAGS='-I$(top_srcdir)/libkexiv2'
    LIBKEXIV2_LIBS='$(top_builddir)/libkexiv2/libkexiv2/libkexiv2.la'
    LIBKEXIV2_LIBS_DEP='$(LIBKEXIV2_LIBS)'
    AC_MSG_RESULT([found])
    AC_SUBST(LIBKEXIV2_CFLAGS)
    AC_SUBST(LIBKEXIV2_LIBS)
    AC_SUBST(LIBKEXIV2_LIBS_DEP)
else

    if test "$PKGCONFIGFOUND" = "yes" ; then
        # check for libkexiv2
        have_libkexiv2=no

        KDE_PKG_CHECK_MODULES(LIBKEXIV2, libkexiv2 >= 0.1.5,
                have_libkexiv2=yes, have_libkexiv2=no)

        if test "x$have_libkexiv2" = "xno"; then
           LIBKEXIV2_CFLAGS=""
           LIBKEXIV2_LIBS=""
           AC_MSG_RESULT([not found])
        else
           AC_MSG_RESULT([found])
        fi
     else
        LIBKEXIV2_CFLAGS=""
        LIBKEXIV2_LIBS=""
        AC_MSG_RESULT([not found])
     fi
     AC_SUBST(LIBKEXIV2_CFLAGS)
     AC_SUBST(LIBKEXIV2_LIBS)
fi

if test x$have_libkexiv2 != xyes; then
  AC_MSG_ERROR([libkexiv2 library is required by kipi-plugins.])
  DO_NOT_COMPILE="$DO_NOT_COMPILE kipi-plugins"
fi

# --------------------------------------------------------------------
#
# Check for libkdcraw
#
# --------------------------------------------------------------------

AC_MSG_CHECKING([for libkdcraw in our sources])
if test -d $srcdir/libkdcraw; then
    have_libkdcraw=yes
    LIBKDCRAW_CFLAGS='-I$(top_builddir)/libkdcraw -I$(top_srcdir)/libkdcraw'
    LIBKDCRAW_LIBS='$(top_builddir)/libkdcraw/libkdcraw/libkdcraw.la'
    LIBKDCRAW_LIBS_DEP='$(LIBKDCRAW_LIBS)'
    AC_MSG_RESULT([found])
    AC_SUBST(LIBKDCRAW_CFLAGS)
    AC_SUBST(LIBKDCRAW_LIBS)
    AC_SUBST(LIBKDCRAW_LIBS_DEP)
else

    if test "$PKGCONFIGFOUND" = "yes" ; then
        # check for libkdcraw
        have_libkdcraw=no

        KDE_PKG_CHECK_MODULES(LIBKDCRAW, libkdcraw >= 0.1.1,
                have_libkdcraw=yes, have_libkdcraw=no)

        if test "x$have_libkdcraw" = "xno"; then
           LIBKDCRAW_CFLAGS=""
           LIBKDCRAW_LIBS=""
           AC_MSG_RESULT([not found])
        else
           AC_MSG_RESULT([found])
        fi
     else
        LIBKDCRAW_CFLAGS=""
        LIBKDCRAW_LIBS=""
        AC_MSG_RESULT([not found])
     fi
     AC_SUBST(LIBKDCRAW_CFLAGS)
     AC_SUBST(LIBKDCRAW_LIBS)
fi

if test x$have_libkdcraw != xyes; then
  AC_MSG_ERROR([libkdcraw library is required by kipi-plugins.])
  DO_NOT_COMPILE="$DO_NOT_COMPILE kipi-plugins"
fi

#------------------------------------------------------------------
#
# Check for libtiff
#
#------------------------------------------------------------------

have_tiff=no
AC_CHECK_LIB(tiff, TIFFWriteScanline,
  have_tiff=yes,
  AC_MSG_WARN([TIFF library not found]),
  $all_libraries -ljpeg -lz -lm)

if test "x$have_tiff" = "xyes"; then
  KDE_CHECK_HEADER(tiffio.h, have_tiff=yes, have_tiff=no)
fi

if test "x$have_tiff" != "xyes"; then
  AC_WARN([TIFF library not found, acquireimages, jpeglossless and rawconverter plugins will not be compiled.])
else
  LIB_TIFF="-ltiff"
  AC_SUBST(LIB_TIFF)
fi

AM_CONDITIONAL(compile_ACQUIREIMAGES, [test x$have_tiff = xyes])
AM_CONDITIONAL(compile_RAWCONVERTER,  [test x$have_tiff = xyes])

#---------------------------------------------------------
#
# gphoto2 detection - KameraKlient plugin
#
#---------------------------------------------------------

have_gphoto=no
AC_PATH_PROG(GPHOTO_CONFIG,gphoto2-config)
AC_PATH_PROG(GPHOTO_PORT_CONFIG,gphoto2-port-config)
if test -n "${GPHOTO_CONFIG}"; then
  GPHOTO_CFLAGS="`$GPHOTO_CONFIG --cflags`"
  AC_SUBST(GPHOTO_CFLAGS)
  LIB_GPHOTO="`$GPHOTO_CONFIG --libs` `$GPHOTO_PORT_CONFIG --libs`"
  AC_SUBST(LIB_GPHOTO)
  have_gphoto=yes
else
  AC_MSG_WARN([
gPhoto2 is required for the kameraklient plugin.
It's available from gPhoto's Sourceforge CVS.
Check http://www.gphoto.org/download.html for detail])
fi

AM_CONDITIONAL(compile_KAMERAKLIENT, test -n "${GPHOTO_CONFIG}")

#---------------------------------------------------------
#
# xslt detection - HTML export plugin
#
#---------------------------------------------------------

have_xslt=no
AC_PATH_PROG(XSLT_CONFIG,xslt-config)
if test -n "${XSLT_CONFIG}"; then
  LIBXSLT_CFLAGS="`$XSLT_CONFIG --cflags`"
  AC_SUBST(LIBXSLT_CFLAGS)
  LIBXSLT_LIBS="`$XSLT_CONFIG --libs`"
  AC_SUBST(LIBXSLT_LIBS)
  have_xslt=yes
else
  AC_MSG_WARN([
libxslt is required for the htmlexport plugin.
])
fi

AM_CONDITIONAL(compile_HTMLEXPORT, test -n "${XSLT_CONFIG}")

#------------------------------------------------------------------
#
# Check for libgpod - ipod export plugin
#
#------------------------------------------------------------------

have_libgpod=no
if test "$build_libgpod" != "no"; then
    if test "$PKGCONFIGFOUND" = "yes" ; then

        KDE_PKG_CHECK_MODULES(LIBGPOD, libgpod-1.0 >= 0.4.2 gobject-2.0, have_libgpod=yes,have_libgpod=no)

        if test "x$have_libgpod" = "xyes"; then
            AC_DEFINE(HAVE_LIBGPOD, 1, [have libgpod])
            ac_cppflags_save=$CPPFLAGS
            ac_cflags_save=$CFLAGS
            ac_ldflags_save=$LDFLAGS

            CPPFLAGS="$CPPFLAGS $LIBGPOD_INCLUDES"
            CFLAGS="$CFLAGS $LIBGPOD_CFLAGS"
            LDFLAGS="$LDFLAGS $LIBGPOD_LIBS"
        else
            AC_MSG_WARN([libgpod is required for the iPod export plugin.])
        fi
    fi
fi

AM_CONDITIONAL(compile_IPODEXPORT,  [test x$have_libgpod = xyes])

#------------------------------------------------------------------
#
# Check for libkcal - iCalendar support library
#
#------------------------------------------------------------------

have_libkcal=no

KDE_CHECK_HEADERS(libkcal/calendarlocal.h, have_libkcal=yes, have_libkcal=no)
if test "x$have_libkcal" != "xyes"; then
  AC_WARN([libkcal not found, calendar plugin will not be compiled.])
else
  LIB_KCAL="-llibkcal"
  AC_SUBST(LIB_KCAL)
fi

AM_CONDITIONAL(compile_CALENDAR, [test x$have_libkcal = xyes])


# ----------------------------------------------------------
#
# Qt OpenGl check (fudged from Amarok) - Slideshow plugin
#
# ----------------------------------------------------------

AC_ARG_WITH(opengl,
    AC_HELP_STRING([--without-opengl],[build kipi-plugins without OpenGL [default=with]]),
    [build_opengl=$withval],
    [build_opengl=yes]
)

if test "$build_opengl" != "no"; then
    AC_MSG_CHECKING(for Qt with OpenGL support)
    AC_CACHE_VAL(ac_cv_kde_qt_has_opengl,
    [
    AC_LANG_SAVE
    AC_LANG_CPLUSPLUS

    save_CXXFLAGS="$CXXFLAGS"
    save_LIBS="$LIBS"
    save_LDFLAGS="$LDFLAGS"

    CXXFLAGS="$CXXFLAGS -I$qt_incdir $all_includes"
    LDFLAGS="$LDFLAGS -L$qt_libdir $all_libraries $USER_LDFLAGS $KDE_MT_LDFLAGS"
    LIBS="$LIBS $LIBQT $KDE_MT_LIBS"

    AC_TRY_LINK([
    #include <qgl.h>
    ],
    [
    (void)new QGLWidget((QWidget*)0, "qgl");
    ],
    ac_cv_kde_qt_has_opengl=yes,
    ac_cv_kde_qt_has_opengl=no)

    CXXFLAGS="$save_CXXFLAGS"
    LIBS="$save_LIBS"
    LDFLAGS="$save_LDFLAGS"
    AC_LANG_RESTORE
    ])
    AC_MSG_RESULT($ac_cv_kde_qt_has_opengl)

    if test x$ac_cv_kde_qt_has_opengl = xyes; then
       have_GL="yes"
       GL_LIBS="-lGL"
    else
       have_GL="no"
       GL_LIBS=""
    fi

    AC_SUBST(GL_LIBS)
fi

#---------------------------------------------------------
#
# imlib2-detection - Slideshow plugin
#
#---------------------------------------------------------

AC_DEFUN([KDE_FIND_IMLIB2_CONFIG],
   [AC_MSG_CHECKING([for imlib2-config])

imlib2_config_given=NO
ac_imlib2_config=""

AC_ARG_WITH(imlib2-config,
        [  --with-imlib2-config     directory where \"imlib2-config\" lies ],
        [  ac_imlib2_config="$withval/imlib2-config"
           imlib2_config_given=yes
        ])

if test "$imlib2_config_given" = "yes"; then
  if test ! -r $ac_imlib2_config; then
    AC_MSG_RESULT(wrong file specified)
    ac_imlib2_config=""
  else
    IMLIB2_CFLAGS=`$ac_imlib2_config --cflags`
    LIB_IMLIB2=`$ac_imlib2_config --libs`
    AC_SUBST(LIB_IMLIB2)
    AC_SUBST(IMLIB2_CFLAGS)
    AC_MSG_RESULT($ac_imlib2_config)
  fi
else
  ac_imlib2_config=`which imlib2-config 2>/dev/null`
  if test -z "$ac_imlib2_config"; then
    AC_MSG_RESULT(no)
  else
    dummy=`echo "$ac_imlib2_config" | grep '/imlib2-config'`
    if test -z "$dummy"; then
      AC_MSG_RESULT(no)
      ac_imlib2_config=""
    else
      LIB_IMLIB2=`$ac_imlib2_config --libs`
      IMLIB2_CFLAGS=`$ac_imlib2_config --cflags`
      imlib2_config=`echo "$LIB_IMLIB2" | grep lImlib2`
      if test -z "$imlib2_config"; then
        AC_MSG_RESULT(no)
        ac_imlib2_config=""
      else
        AC_SUBST(LIB_IMLIB2)
        AC_SUBST(IMLIB2_CFLAGS)
        AC_MSG_RESULT($ac_imlib2_config)
      fi
    fi
  fi
fi

])

dnl Check if Imlib2 is installed properly
KDE_FIND_IMLIB2_CONFIG

AM_CONDITIONAL(compile_SLIDESHOW, test -n "$ac_imlib2_config" -a "$have_GL" = yes )

if test -z "$ac_imlib2_config" -o "$have_GL" != yes; then
	AC_MSG_WARN([Slideshow plugin will not be compiled])
fi

